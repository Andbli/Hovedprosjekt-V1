#include <AiEsp32RotaryEncoder.h>

// --- Pin definitions for rotary encoders ---
#define ENCODER1_A 18
#define ENCODER1_B 19
#define ENCODER2_A 26
#define ENCODER2_B 27

// --- Value range for encoders ---
#define MIN_VALUE 0
#define MAX_VALUE 100

// --- Create encoder objects ---
AiEsp32RotaryEncoder encoder1(ENCODER1_A, ENCODER1_B, -1, -1, 4);  // Encoder 1 setup
AiEsp32RotaryEncoder encoder2(ENCODER2_A, ENCODER2_B, -1, -1, 4);  // Encoder 2 setup

// --- Interrupt service routines for encoder readings ---
void IRAM_ATTR handleEncoder1() { encoder1.readEncoder_ISR(); }
void IRAM_ATTR handleEncoder2() { encoder2.readEncoder_ISR(); }

void setup() {
    // Start serial communication for debugging
    Serial.begin(115200);
    delay(1000);  // Give time to open Serial Monitor
    
    // Initialize pins for rotary encoders (with internal pull-ups)
    pinMode(ENCODER1_A, INPUT_PULLUP);
    pinMode(ENCODER1_B, INPUT_PULLUP);
    pinMode(ENCODER2_A, INPUT_PULLUP);
    pinMode(ENCODER2_B, INPUT_PULLUP);

    // Begin and configure the encoders
    encoder1.begin();
    encoder2.begin();

    // Attach interrupt handlers for each encoder
    encoder1.setup(handleEncoder1);
    encoder2.setup(handleEncoder2);

    // Set the encoder value boundaries
    encoder1.setBoundaries(MIN_VALUE, MAX_VALUE, true);
    encoder2.setBoundaries(MIN_VALUE, MAX_VALUE, true);

    // Adjust the encoder acceleration and debounce time
    encoder1.setAcceleration(3);  // Slow down the acceleration (lower value is slower)
    encoder2.setAcceleration(1);  // Slow down the acceleration


    Serial.println("[INFO] Encoders initialized and boundaries set.");
}

void loop() {
    // Print current values of both encoders continuously
    printEncoderValue(encoder1, "Encoder 1");
    printEncoderValue(encoder2, "Encoder 2");

    delay(100);  // Short delay to avoid flooding Serial Monitor
}

// --- Function to print encoder values continuously ---
void printEncoderValue(AiEsp32RotaryEncoder &encoder, const char *encoderName) {
    // Get the current encoder value
    int currentValue = encoder.readEncoder();


    // Print the encoder value
    Serial.printf("%s value: %d\n", encoderName, currentValue);
}
